"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Camera = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var camera_orthographic_js_1 = require("../fla2/camera-orthographic.js");
var camera_perspective_js_1 = require("../fla2/camera-perspective.js");
var camera_type_js_1 = require("../fla2/camera-type.js");
var Camera = /** @class */ (function () {
    function Camera() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Camera.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Camera.getRootAsCamera = function (bb, obj) {
        return (obj || new Camera()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Camera.getSizePrefixedRootAsCamera = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Camera()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Camera.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Camera.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Camera.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Camera.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Camera.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Camera.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "Specifies if the camera uses a perspective or orthographic projection."
     * "gltf_detailedDescription": "Specifies if the camera uses a perspective or orthographic projection.  Based on this, either the camera's `perspective` or `orthographic` property will be defined."
     */
    Camera.prototype.type = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt16(this.bb_pos + offset) : camera_type_js_1.CameraType.perspective;
    };
    Camera.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * "description": "A perspective camera containing properties to create a perspective projection matrix."
     */
    Camera.prototype.perspective = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new camera_perspective_js_1.CameraPerspective()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * "description": "An orthographic camera containing properties to create an orthographic projection matrix."
     */
    Camera.prototype.orthographic = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new camera_orthographic_js_1.CameraOrthographic()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Camera.startCamera = function (builder) {
        builder.startObject(6);
    };
    Camera.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(0, extensionsOffset, 0);
    };
    Camera.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Camera.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Camera.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(1, extrasOffset, 0);
    };
    Camera.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Camera.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Camera.addType = function (builder, type) {
        builder.addFieldInt16(2, type, camera_type_js_1.CameraType.perspective);
    };
    Camera.addName = function (builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    };
    Camera.addPerspective = function (builder, perspectiveOffset) {
        builder.addFieldOffset(4, perspectiveOffset, 0);
    };
    Camera.addOrthographic = function (builder, orthographicOffset) {
        builder.addFieldOffset(5, orthographicOffset, 0);
    };
    Camera.endCamera = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    return Camera;
}());
exports.Camera = Camera;

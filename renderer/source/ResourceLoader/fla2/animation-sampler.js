"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationSampler = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var animation_sampler_interpolation_algorithm_js_1 = require("../fla2/animation-sampler-interpolation-algorithm.js");
/**
 * Animation Sampler
 * "description": "Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)."
 */
var AnimationSampler = /** @class */ (function () {
    function AnimationSampler() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AnimationSampler.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AnimationSampler.getRootAsAnimationSampler = function (bb, obj) {
        return (obj || new AnimationSampler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AnimationSampler.getSizePrefixedRootAsAnimationSampler = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AnimationSampler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Application-specific data.
     */
    AnimationSampler.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AnimationSampler.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AnimationSampler.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    AnimationSampler.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AnimationSampler.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AnimationSampler.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "The index of an accessor containing keyframe input values, e.g., time."
     * "gltf_detailedDescription": "The index of an accessor containing keyframe input values, e.g., time. That accessor must have componentType `FLOAT`. The values represent time in seconds with `time[0] >= 0.0`, and strictly increasing values, i.e., `time[n + 1] > time[n]`."
     */
    AnimationSampler.prototype.input = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "Interpolation algorithm."
     * "gltf_detailedDescription": "Interpolation algorithm."
     */
    AnimationSampler.prototype.interpolation = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : animation_sampler_interpolation_algorithm_js_1.AnimationSamplerInterpolationAlgorithm.LINEAR;
    };
    /**
     * "description": "The index of an accessor, containing keyframe output values."
     * "gltf_detailedDescription": "The index of an accessor containing keyframe output values. When targeting TRS target, the `accessor.componentType` of the output values must be `FLOAT`. When targeting morph weights, the `accessor.componentType` of the output values must be `FLOAT` or normalized integer where each output element stores values with a count equal to the number of morph targets."
     */
    AnimationSampler.prototype.output = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    AnimationSampler.startAnimationSampler = function (builder) {
        builder.startObject(5);
    };
    AnimationSampler.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(0, extrasOffset, 0);
    };
    AnimationSampler.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AnimationSampler.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AnimationSampler.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(1, extensionsOffset, 0);
    };
    AnimationSampler.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AnimationSampler.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AnimationSampler.addInput = function (builder, input) {
        builder.addFieldInt32(2, input, 0);
    };
    AnimationSampler.addInterpolation = function (builder, interpolation) {
        builder.addFieldInt8(3, interpolation, animation_sampler_interpolation_algorithm_js_1.AnimationSamplerInterpolationAlgorithm.LINEAR);
    };
    AnimationSampler.addOutput = function (builder, output) {
        builder.addFieldInt32(4, output, 0);
    };
    AnimationSampler.endAnimationSampler = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    AnimationSampler.createAnimationSampler = function (builder, extrasOffset, extensionsOffset, input, interpolation, output) {
        AnimationSampler.startAnimationSampler(builder);
        AnimationSampler.addExtras(builder, extrasOffset);
        AnimationSampler.addExtensions(builder, extensionsOffset);
        AnimationSampler.addInput(builder, input);
        AnimationSampler.addInterpolation(builder, interpolation);
        AnimationSampler.addOutput(builder, output);
        return AnimationSampler.endAnimationSampler(builder);
    };
    return AnimationSampler;
}());
exports.AnimationSampler = AnimationSampler;

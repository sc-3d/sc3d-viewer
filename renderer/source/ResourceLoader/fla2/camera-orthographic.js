"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraOrthographic = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 *----------------------------------------------------------------------------
 * Camera Orthographic
 * "description": "An orthographic camera containing properties to create an orthographic projection matrix."
 */
var CameraOrthographic = /** @class */ (function () {
    function CameraOrthographic() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CameraOrthographic.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CameraOrthographic.getRootAsCameraOrthographic = function (bb, obj) {
        return (obj || new CameraOrthographic()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CameraOrthographic.getSizePrefixedRootAsCameraOrthographic = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CameraOrthographic()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "The floating-point horizontal magnification of the view. Must not be zero."
     */
    CameraOrthographic.prototype.xmag = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    /**
     * "description": "The floating-point vertical magnification of the view. Must not be zero."
     */
    CameraOrthographic.prototype.ymag = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    /**
     * "description": "The floating-point distance to the far clipping plane. `zfar` must be greater than `znear`."
     */
    CameraOrthographic.prototype.zfar = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    /**
     * "description": "The floating-point distance to the near clipping plane."
     */
    CameraOrthographic.prototype.znear = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    CameraOrthographic.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    CameraOrthographic.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CameraOrthographic.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    CameraOrthographic.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    CameraOrthographic.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CameraOrthographic.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    CameraOrthographic.startCameraOrthographic = function (builder) {
        builder.startObject(6);
    };
    CameraOrthographic.addXmag = function (builder, xmag) {
        builder.addFieldFloat32(0, xmag, 0.0);
    };
    CameraOrthographic.addYmag = function (builder, ymag) {
        builder.addFieldFloat32(1, ymag, 0.0);
    };
    CameraOrthographic.addZfar = function (builder, zfar) {
        builder.addFieldFloat32(2, zfar, 0.0);
    };
    CameraOrthographic.addZnear = function (builder, znear) {
        builder.addFieldFloat32(3, znear, 0.0);
    };
    CameraOrthographic.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(4, extensionsOffset, 0);
    };
    CameraOrthographic.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    CameraOrthographic.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    CameraOrthographic.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(5, extrasOffset, 0);
    };
    CameraOrthographic.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    CameraOrthographic.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    CameraOrthographic.endCameraOrthographic = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CameraOrthographic.createCameraOrthographic = function (builder, xmag, ymag, zfar, znear, extensionsOffset, extrasOffset) {
        CameraOrthographic.startCameraOrthographic(builder);
        CameraOrthographic.addXmag(builder, xmag);
        CameraOrthographic.addYmag(builder, ymag);
        CameraOrthographic.addZfar(builder, zfar);
        CameraOrthographic.addZnear(builder, znear);
        CameraOrthographic.addExtensions(builder, extensionsOffset);
        CameraOrthographic.addExtras(builder, extrasOffset);
        return CameraOrthographic.endCameraOrthographic(builder);
    };
    return CameraOrthographic;
}());
exports.CameraOrthographic = CameraOrthographic;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationChannelTarget = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var animation_channel_target_path_js_1 = require("../fla2/animation-channel-target-path.js");
/**
 * Animation Channel Target
 * "description": "The index of the node and TRS property that an animation channel targets."
 */
var AnimationChannelTarget = /** @class */ (function () {
    function AnimationChannelTarget() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AnimationChannelTarget.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AnimationChannelTarget.getRootAsAnimationChannelTarget = function (bb, obj) {
        return (obj || new AnimationChannelTarget()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AnimationChannelTarget.getSizePrefixedRootAsAnimationChannelTarget = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AnimationChannelTarget()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    AnimationChannelTarget.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AnimationChannelTarget.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AnimationChannelTarget.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    AnimationChannelTarget.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AnimationChannelTarget.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AnimationChannelTarget.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "The index of the node to target."
     */
    AnimationChannelTarget.prototype.node = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "The name of the node's TRS property to modify, or the \"weights\" of the Morph Targets it instantiates."
     */
    AnimationChannelTarget.prototype.path = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : animation_channel_target_path_js_1.AnimationChannelTargetPath.translation;
    };
    AnimationChannelTarget.startAnimationChannelTarget = function (builder) {
        builder.startObject(4);
    };
    AnimationChannelTarget.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(0, extensionsOffset, 0);
    };
    AnimationChannelTarget.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AnimationChannelTarget.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AnimationChannelTarget.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(1, extrasOffset, 0);
    };
    AnimationChannelTarget.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AnimationChannelTarget.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AnimationChannelTarget.addNode = function (builder, node) {
        builder.addFieldInt32(2, node, -1);
    };
    AnimationChannelTarget.addPath = function (builder, path) {
        builder.addFieldInt8(3, path, animation_channel_target_path_js_1.AnimationChannelTargetPath.translation);
    };
    AnimationChannelTarget.endAnimationChannelTarget = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    AnimationChannelTarget.createAnimationChannelTarget = function (builder, extensionsOffset, extrasOffset, node, path) {
        AnimationChannelTarget.startAnimationChannelTarget(builder);
        AnimationChannelTarget.addExtensions(builder, extensionsOffset);
        AnimationChannelTarget.addExtras(builder, extrasOffset);
        AnimationChannelTarget.addNode(builder, node);
        AnimationChannelTarget.addPath(builder, path);
        return AnimationChannelTarget.endAnimationChannelTarget(builder);
    };
    return AnimationChannelTarget;
}());
exports.AnimationChannelTarget = AnimationChannelTarget;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mesh = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var mesh_primitive_js_1 = require("../fla2/mesh-primitive.js");
/**
 * Mesh
 * "description": "A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene."
 */
var Mesh = /** @class */ (function () {
    function Mesh() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Mesh.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Mesh.getRootAsMesh = function (bb, obj) {
        return (obj || new Mesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Mesh.getSizePrefixedRootAsMesh = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Mesh()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Mesh.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Mesh.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Mesh.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Mesh.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Mesh.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Mesh.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Mesh.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * "description": "An array of primitives, each defining geometry to be rendered with a material."
     */
    Mesh.prototype.primitives = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new mesh_primitive_js_1.MeshPrimitive()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Mesh.prototype.primitivesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "Array of weights to be applied to the Morph Targets."
     */
    Mesh.prototype.weights = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Mesh.prototype.weightsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Mesh.prototype.weightsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Mesh.startMesh = function (builder) {
        builder.startObject(5);
    };
    Mesh.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(0, extensionsOffset, 0);
    };
    Mesh.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Mesh.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Mesh.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(1, extrasOffset, 0);
    };
    Mesh.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Mesh.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Mesh.addName = function (builder, nameOffset) {
        builder.addFieldOffset(2, nameOffset, 0);
    };
    Mesh.addPrimitives = function (builder, primitivesOffset) {
        builder.addFieldOffset(3, primitivesOffset, 0);
    };
    Mesh.createPrimitivesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Mesh.startPrimitivesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Mesh.addWeights = function (builder, weightsOffset) {
        builder.addFieldOffset(4, weightsOffset, 0);
    };
    Mesh.createWeightsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    Mesh.startWeightsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Mesh.endMesh = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 10); // primitives
        return offset;
    };
    Mesh.createMesh = function (builder, extensionsOffset, extrasOffset, nameOffset, primitivesOffset, weightsOffset) {
        Mesh.startMesh(builder);
        Mesh.addExtensions(builder, extensionsOffset);
        Mesh.addExtras(builder, extrasOffset);
        Mesh.addName(builder, nameOffset);
        Mesh.addPrimitives(builder, primitivesOffset);
        Mesh.addWeights(builder, weightsOffset);
        return Mesh.endMesh(builder);
    };
    return Mesh;
}());
exports.Mesh = Mesh;

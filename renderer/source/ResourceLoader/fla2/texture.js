"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 *----------------------------------------------------------------------------
 * Texture
 * "description": "A texture and its sampler."
 * "gltf_webgl": "`createTexture()`, `deleteTexture()`, `bindTexture()`, `texImage2D()`, and `texParameterf()`"
 */
var Texture = /** @class */ (function () {
    function Texture() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Texture.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Texture.getRootAsTexture = function (bb, obj) {
        return (obj || new Texture()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Texture.getSizePrefixedRootAsTexture = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Texture()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Texture.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Texture.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Texture.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Texture.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Texture.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Texture.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Texture.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used."
     */
    Texture.prototype.sampler = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "The index of the image used by this texture."
     */
    Texture.prototype.source = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    Texture.startTexture = function (builder) {
        builder.startObject(5);
    };
    Texture.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    Texture.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(1, extensionsOffset, 0);
    };
    Texture.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Texture.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Texture.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(2, extrasOffset, 0);
    };
    Texture.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Texture.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Texture.addSampler = function (builder, sampler) {
        builder.addFieldInt32(3, sampler, -1);
    };
    Texture.addSource = function (builder, source) {
        builder.addFieldInt32(4, source, -1);
    };
    Texture.endTexture = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Texture.createTexture = function (builder, nameOffset, extensionsOffset, extrasOffset, sampler, source) {
        Texture.startTexture(builder);
        Texture.addName(builder, nameOffset);
        Texture.addExtensions(builder, extensionsOffset);
        Texture.addExtras(builder, extrasOffset);
        Texture.addSampler(builder, sampler);
        Texture.addSource(builder, source);
        return Texture.endTexture(builder);
    };
    return Texture;
}());
exports.Texture = Texture;

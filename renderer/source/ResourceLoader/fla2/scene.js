"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Scene = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 *----------------------------------------------------------------------------
 * Scene
 * "description": "The root nodes of a scene."
 */
var Scene = /** @class */ (function () {
    function Scene() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Scene.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Scene.getRootAsScene = function (bb, obj) {
        return (obj || new Scene()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Scene.getSizePrefixedRootAsScene = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Scene()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Scene.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Scene.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Scene.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Scene.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Scene.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Scene.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Scene.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * "description": "The indices of each root node."
     */
    Scene.prototype.nodes = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Scene.prototype.nodesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Scene.prototype.nodesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Scene.startScene = function (builder) {
        builder.startObject(4);
    };
    Scene.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(0, extensionsOffset, 0);
    };
    Scene.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Scene.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Scene.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(1, extrasOffset, 0);
    };
    Scene.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Scene.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Scene.addName = function (builder, nameOffset) {
        builder.addFieldOffset(2, nameOffset, 0);
    };
    Scene.addNodes = function (builder, nodesOffset) {
        builder.addFieldOffset(3, nodesOffset, 0);
    };
    Scene.createNodesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Scene.startNodesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Scene.endScene = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Scene.createScene = function (builder, extensionsOffset, extrasOffset, nameOffset, nodesOffset) {
        Scene.startScene(builder);
        Scene.addExtensions(builder, extensionsOffset);
        Scene.addExtras(builder, extrasOffset);
        Scene.addName(builder, nameOffset);
        Scene.addNodes(builder, nodesOffset);
        return Scene.endScene(builder);
    };
    return Scene;
}());
exports.Scene = Scene;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessorSparseIndices = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var component_type_js_1 = require("../fla2/component-type.js");
var AccessorSparseIndices = /** @class */ (function () {
    function AccessorSparseIndices() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AccessorSparseIndices.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AccessorSparseIndices.getRootAsAccessorSparseIndices = function (bb, obj) {
        return (obj || new AccessorSparseIndices()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AccessorSparseIndices.getSizePrefixedRootAsAccessorSparseIndices = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AccessorSparseIndices()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target."
     */
    AccessorSparseIndices.prototype.bufferView = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "The offset relative to the start of the bufferView in bytes. Must be aligned."
     */
    AccessorSparseIndices.prototype.byteOffset = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    AccessorSparseIndices.prototype.componentType = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : component_type_js_1.ComponentType.UNSIGNED_BYTE;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    AccessorSparseIndices.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AccessorSparseIndices.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AccessorSparseIndices.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    AccessorSparseIndices.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AccessorSparseIndices.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AccessorSparseIndices.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    AccessorSparseIndices.startAccessorSparseIndices = function (builder) {
        builder.startObject(5);
    };
    AccessorSparseIndices.addBufferView = function (builder, bufferView) {
        builder.addFieldInt32(0, bufferView, -1);
    };
    AccessorSparseIndices.addByteOffset = function (builder, byteOffset) {
        builder.addFieldInt32(1, byteOffset, 0);
    };
    AccessorSparseIndices.addComponentType = function (builder, componentType) {
        builder.addFieldInt32(2, componentType, component_type_js_1.ComponentType.UNSIGNED_BYTE);
    };
    AccessorSparseIndices.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(3, extensionsOffset, 0);
    };
    AccessorSparseIndices.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AccessorSparseIndices.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AccessorSparseIndices.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(4, extrasOffset, 0);
    };
    AccessorSparseIndices.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AccessorSparseIndices.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AccessorSparseIndices.endAccessorSparseIndices = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    AccessorSparseIndices.createAccessorSparseIndices = function (builder, bufferView, byteOffset, componentType, extensionsOffset, extrasOffset) {
        AccessorSparseIndices.startAccessorSparseIndices(builder);
        AccessorSparseIndices.addBufferView(builder, bufferView);
        AccessorSparseIndices.addByteOffset(builder, byteOffset);
        AccessorSparseIndices.addComponentType(builder, componentType);
        AccessorSparseIndices.addExtensions(builder, extensionsOffset);
        AccessorSparseIndices.addExtras(builder, extrasOffset);
        return AccessorSparseIndices.endAccessorSparseIndices(builder);
    };
    return AccessorSparseIndices;
}());
exports.AccessorSparseIndices = AccessorSparseIndices;

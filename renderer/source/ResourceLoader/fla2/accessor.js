"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Accessor = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var accessor_sparse_js_1 = require("../fla2/accessor-sparse.js");
var accessor_type_js_1 = require("../fla2/accessor-type.js");
var component_type_js_1 = require("../fla2/component-type.js");
/**
 * A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.
 */
var Accessor = /** @class */ (function () {
    function Accessor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Accessor.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Accessor.getRootAsAccessor = function (bb, obj) {
        return (obj || new Accessor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Accessor.getSizePrefixedRootAsAccessor = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Accessor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "The index of the bufferView."
     * "gltf_detailedDescription": "The index of the bufferView. When not defined, accessor must be initialized with zeros; `sparse` property or extensions could override zeros with actual values."
     */
    Accessor.prototype.bufferView = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "The offset relative to the start of the bufferView in bytes."
     * "gltf_detailedDescription": "The offset relative to the start of the bufferView in bytes.  This must be a multiple of the size of the component datatype."
     * "gltf_webgl": "`vertexAttribPointer()` offset parameter"
     */
    Accessor.prototype.byteOffset = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "The datatype of components in the attribute."
     * "gltf_detailedDescription": "The datatype of components in the attribute.  All valid values correspond to WebGL enums.  The corresponding typed arrays are `Int8Array`, `Uint8Array`, `Int16Array`, `Uint16Array`, `Uint32Array`, and `Float32Array`, respectively.  5125 (UNSIGNED_INT) is only allowed when the accessor contains indices, i.e., the accessor is only referenced by `primitive.indices`."
     * "gltf_webgl": "`vertexAttribPointer()` type parameter"
     */
    Accessor.prototype.componentType = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : component_type_js_1.ComponentType.BYTE;
    };
    /**
     * "description": "The number of attributes referenced by this accessor."
     * "gltf_detailedDescription": "The number of attributes referenced by this accessor, not to be confused with the number of bytes or number of components."
     */
    Accessor.prototype.count = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "Sparse storage of attributes that deviate from their initialization value."
     */
    Accessor.prototype.sparse = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new accessor_sparse_js_1.AccessorSparse()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Accessor.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     *  "description": "Maximum value of each component in this attribute."
     * "minItems": 1,
     * "maxItems": 16,
     * "gltf_detailedDescription": "Maximum value of each component in this attribute.  Array elements must be treated as having the same data type as accessor's `componentType`. Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.\n\n`normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain max values of accessor data with sparse substitution applied."
     */
    Accessor.prototype.max = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Accessor.prototype.maxLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Accessor.prototype.maxArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "Minimum value of each component in this attribute."
     * "minItems": 1,
     * "maxItems": 16,
     * "gltf_detailedDescription": "Minimum value of each component in this attribute.  Array elements must be treated as having the same data type as accessor's `componentType`. Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.\n\n`normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain min values of accessor data with sparse substitution applied."
     */
    Accessor.prototype.min = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Accessor.prototype.minLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Accessor.prototype.minArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Accessor.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Accessor.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Accessor.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "Specifies whether integer data values should be normalized."
     * "gltf_detailedDescription": "Specifies whether integer data values should be normalized (`true`) to [0, 1] (for unsigned types) or [-1, 1] (for signed types), or converted directly (`false`) when they are accessed. This property is defined only for accessors that contain vertex attributes or animation output data."
     * "gltf_webgl": "`vertexAttribPointer()` normalized parameter"
     */
    Accessor.prototype.normalized = function () {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    /**
     * Application-specific data.
     */
    Accessor.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Accessor.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Accessor.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "Specifies if the attribute is a scalar, vector, or matrix."
     */
    Accessor.prototype.type = function () {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : accessor_type_js_1.AccessorType.SCALAR;
    };
    Accessor.startAccessor = function (builder) {
        builder.startObject(12);
    };
    Accessor.addBufferView = function (builder, bufferView) {
        builder.addFieldInt32(0, bufferView, -1);
    };
    Accessor.addByteOffset = function (builder, byteOffset) {
        builder.addFieldInt32(1, byteOffset, 0);
    };
    Accessor.addComponentType = function (builder, componentType) {
        builder.addFieldInt32(2, componentType, component_type_js_1.ComponentType.BYTE);
    };
    Accessor.addCount = function (builder, count) {
        builder.addFieldInt32(3, count, 0);
    };
    Accessor.addSparse = function (builder, sparseOffset) {
        builder.addFieldOffset(4, sparseOffset, 0);
    };
    Accessor.addName = function (builder, nameOffset) {
        builder.addFieldOffset(5, nameOffset, 0);
    };
    Accessor.addMax = function (builder, maxOffset) {
        builder.addFieldOffset(6, maxOffset, 0);
    };
    Accessor.createMaxVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    Accessor.startMaxVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Accessor.addMin = function (builder, minOffset) {
        builder.addFieldOffset(7, minOffset, 0);
    };
    Accessor.createMinVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    };
    Accessor.startMinVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Accessor.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(8, extensionsOffset, 0);
    };
    Accessor.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Accessor.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Accessor.addNormalized = function (builder, normalized) {
        builder.addFieldInt8(9, +normalized, +false);
    };
    Accessor.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(10, extrasOffset, 0);
    };
    Accessor.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Accessor.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Accessor.addType = function (builder, type) {
        builder.addFieldInt8(11, type, accessor_type_js_1.AccessorType.SCALAR);
    };
    Accessor.endAccessor = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    return Accessor;
}());
exports.Accessor = Accessor;

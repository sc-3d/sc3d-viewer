"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationChannel = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var animation_channel_target_js_1 = require("../fla2/animation-channel-target.js");
/**
 * Animation Channel
 * "description": "Targets an animation's sampler at a node's property."
 */
var AnimationChannel = /** @class */ (function () {
    function AnimationChannel() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AnimationChannel.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AnimationChannel.getRootAsAnimationChannel = function (bb, obj) {
        return (obj || new AnimationChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AnimationChannel.getSizePrefixedRootAsAnimationChannel = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AnimationChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    AnimationChannel.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AnimationChannel.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AnimationChannel.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    AnimationChannel.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AnimationChannel.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AnimationChannel.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "The index of a sampler in this animation used to compute the value for the target."
     * "gltf_detailedDescription": "The index of a sampler in this animation used to compute the value for the target, e.g., a node's translation, rotation, or scale (TRS)."
     */
    AnimationChannel.prototype.sampler = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "The index of the node and TRS property to target."
     */
    AnimationChannel.prototype.target = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new animation_channel_target_js_1.AnimationChannelTarget()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    AnimationChannel.startAnimationChannel = function (builder) {
        builder.startObject(4);
    };
    AnimationChannel.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(0, extensionsOffset, 0);
    };
    AnimationChannel.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AnimationChannel.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AnimationChannel.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(1, extrasOffset, 0);
    };
    AnimationChannel.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AnimationChannel.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AnimationChannel.addSampler = function (builder, sampler) {
        builder.addFieldInt32(2, sampler, 0);
    };
    AnimationChannel.addTarget = function (builder, targetOffset) {
        builder.addFieldOffset(3, targetOffset, 0);
    };
    AnimationChannel.endAnimationChannel = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 10); // target
        return offset;
    };
    return AnimationChannel;
}());
exports.AnimationChannel = AnimationChannel;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.FLA2Chunk = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var accessor_js_1 = require("../fla2/accessor.js");
var animation_js_1 = require("../fla2/animation.js");
var asset_js_1 = require("../fla2/asset.js");
var buffer_js_1 = require("../fla2/buffer.js");
var buffer_view_js_1 = require("../fla2/buffer-view.js");
var camera_js_1 = require("../fla2/camera.js");
var image_js_1 = require("../fla2/image.js");
var material_js_1 = require("../fla2/material.js");
var mesh_js_1 = require("../fla2/mesh.js");
var node_js_1 = require("../fla2/node.js");
var sampler_js_1 = require("../fla2/sampler.js");
var scene_js_1 = require("../fla2/scene.js");
var skin_js_1 = require("../fla2/skin.js");
var texture_js_1 = require("../fla2/texture.js");
/**
 *----------------------------------------------------------------------------
 * The root object for a glTF asset.
 */
var FLA2Chunk = /** @class */ (function () {
    function FLA2Chunk() {
        this.bb = null;
        this.bb_pos = 0;
    }
    FLA2Chunk.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    FLA2Chunk.getRootAsFLA2Chunk = function (bb, obj) {
        return (obj || new FLA2Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FLA2Chunk.getSizePrefixedRootAsFLA2Chunk = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new FLA2Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * An array of accessors.
     * gltf_detailedDescription: An array of accessors.  An accessor is a typed view into a bufferView.
     */
    FLA2Chunk.prototype.accessors = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new accessor_js_1.Accessor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.accessorsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of keyframe animations.
     */
    FLA2Chunk.prototype.animations = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new animation_js_1.Animation()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.animationsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * Metadata about the glTF asset.
     */
    FLA2Chunk.prototype.asset = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new asset_js_1.Asset()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * An array of bufferViews.
     * gltf_detailedDescription: An array of bufferViews.  A bufferView is a view into a buffer generally representing a subset of the buffer.
     */
    FLA2Chunk.prototype.bufferViews = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new buffer_view_js_1.BufferView()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.bufferViewsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of buffers.
     * gltf_detailedDescription: An array of buffers.  A buffer points to binary geometry, animation, or skins.
     */
    FLA2Chunk.prototype.buffers = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new buffer_js_1.Buffer()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.buffersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of cameras.
     * gltf_detailedDescription: An array of cameras.  A camera defines a projection matrix.
     */
    FLA2Chunk.prototype.cameras = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new camera_js_1.Camera()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.camerasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     *-- glTFProperty
     * Dictionary object with extension-specific objects.
     */
    FLA2Chunk.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    FLA2Chunk.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    FLA2Chunk.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    FLA2Chunk.prototype.extensionsRequired = function (index, optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    };
    FLA2Chunk.prototype.extensionsRequiredLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    FLA2Chunk.prototype.extensionsUsed = function (index, optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
    };
    FLA2Chunk.prototype.extensionsUsedLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * Application-specific data.
     */
    FLA2Chunk.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    FLA2Chunk.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    FLA2Chunk.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * An array of images.
     * gltf_detailedDescription: An array of images.  An image defines data used to create a texture.
     */
    FLA2Chunk.prototype.images = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? (obj || new image_js_1.Image()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.imagesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of materials.
     * gltf_detailedDescription: An array of materials.  A material defines the appearance of a primitive.
     */
    FLA2Chunk.prototype.materials = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? (obj || new material_js_1.Material()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.materialsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of meshes.
     * gltf_detailedDescription: An array of meshes.  A mesh is a set of primitives to be rendered.
     */
    FLA2Chunk.prototype.meshes = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? (obj || new mesh_js_1.Mesh()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.meshesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of nodes.
     */
    FLA2Chunk.prototype.nodes = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? (obj || new node_js_1.Node()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.nodesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of samplers.
     * gltf_detailedDescription: An array of samplers.  A sampler contains properties for texture filtering and wrapping modes.
     */
    FLA2Chunk.prototype.samplers = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? (obj || new sampler_js_1.Sampler()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.samplersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * The index of the default scene.
     */
    FLA2Chunk.prototype.scene = function () {
        var offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * An array of scenes.
     */
    FLA2Chunk.prototype.scenes = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? (obj || new scene_js_1.Scene()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.scenesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of skins.
     * gltf_detailedDescription: An array of skins.  A skin is defined by joints and matrices.
     */
    FLA2Chunk.prototype.skins = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? (obj || new skin_js_1.Skin()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.skinsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * An array of textures.
     */
    FLA2Chunk.prototype.textures = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? (obj || new texture_js_1.Texture()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    FLA2Chunk.prototype.texturesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    FLA2Chunk.startFLA2Chunk = function (builder) {
        builder.startObject(19);
    };
    FLA2Chunk.addAccessors = function (builder, accessorsOffset) {
        builder.addFieldOffset(0, accessorsOffset, 0);
    };
    FLA2Chunk.createAccessorsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startAccessorsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addAnimations = function (builder, animationsOffset) {
        builder.addFieldOffset(1, animationsOffset, 0);
    };
    FLA2Chunk.createAnimationsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startAnimationsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addAsset = function (builder, assetOffset) {
        builder.addFieldOffset(2, assetOffset, 0);
    };
    FLA2Chunk.addBufferViews = function (builder, bufferViewsOffset) {
        builder.addFieldOffset(3, bufferViewsOffset, 0);
    };
    FLA2Chunk.createBufferViewsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startBufferViewsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addBuffers = function (builder, buffersOffset) {
        builder.addFieldOffset(4, buffersOffset, 0);
    };
    FLA2Chunk.createBuffersVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startBuffersVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addCameras = function (builder, camerasOffset) {
        builder.addFieldOffset(5, camerasOffset, 0);
    };
    FLA2Chunk.createCamerasVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startCamerasVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(6, extensionsOffset, 0);
    };
    FLA2Chunk.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    FLA2Chunk.addExtensionsRequired = function (builder, extensionsRequiredOffset) {
        builder.addFieldOffset(7, extensionsRequiredOffset, 0);
    };
    FLA2Chunk.createExtensionsRequiredVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startExtensionsRequiredVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addExtensionsUsed = function (builder, extensionsUsedOffset) {
        builder.addFieldOffset(8, extensionsUsedOffset, 0);
    };
    FLA2Chunk.createExtensionsUsedVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startExtensionsUsedVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(9, extrasOffset, 0);
    };
    FLA2Chunk.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    FLA2Chunk.addImages = function (builder, imagesOffset) {
        builder.addFieldOffset(10, imagesOffset, 0);
    };
    FLA2Chunk.createImagesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startImagesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addMaterials = function (builder, materialsOffset) {
        builder.addFieldOffset(11, materialsOffset, 0);
    };
    FLA2Chunk.createMaterialsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startMaterialsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addMeshes = function (builder, meshesOffset) {
        builder.addFieldOffset(12, meshesOffset, 0);
    };
    FLA2Chunk.createMeshesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startMeshesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addNodes = function (builder, nodesOffset) {
        builder.addFieldOffset(13, nodesOffset, 0);
    };
    FLA2Chunk.createNodesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startNodesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addSamplers = function (builder, samplersOffset) {
        builder.addFieldOffset(14, samplersOffset, 0);
    };
    FLA2Chunk.createSamplersVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startSamplersVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addScene = function (builder, scene) {
        builder.addFieldInt32(15, scene, -1);
    };
    FLA2Chunk.addScenes = function (builder, scenesOffset) {
        builder.addFieldOffset(16, scenesOffset, 0);
    };
    FLA2Chunk.createScenesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startScenesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addSkins = function (builder, skinsOffset) {
        builder.addFieldOffset(17, skinsOffset, 0);
    };
    FLA2Chunk.createSkinsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startSkinsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.addTextures = function (builder, texturesOffset) {
        builder.addFieldOffset(18, texturesOffset, 0);
    };
    FLA2Chunk.createTexturesVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    FLA2Chunk.startTexturesVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    FLA2Chunk.endFLA2Chunk = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    FLA2Chunk.finishFLA2ChunkBuffer = function (builder, offset) {
        builder.finish(offset);
    };
    FLA2Chunk.finishSizePrefixedFLA2ChunkBuffer = function (builder, offset) {
        builder.finish(offset, undefined, true);
    };
    return FLA2Chunk;
}());
exports.FLA2Chunk = FLA2Chunk;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Buffer = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 *----------------------------------------------------------------------------
 * Buffer
 * "description": "A buffer points to binary geometry, animation, or skins."
 */
var Buffer = /** @class */ (function () {
    function Buffer() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Buffer.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Buffer.getRootAsBuffer = function (bb, obj) {
        return (obj || new Buffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Buffer.getSizePrefixedRootAsBuffer = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Buffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "The length of the buffer in bytes."
     */
    Buffer.prototype.byteLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    Buffer.prototype.uri = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Buffer.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Buffer.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Buffer.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Buffer.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Buffer.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Buffer.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Buffer.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Buffer.startBuffer = function (builder) {
        builder.startObject(5);
    };
    Buffer.addByteLength = function (builder, byteLength) {
        builder.addFieldInt32(0, byteLength, 0);
    };
    Buffer.addUri = function (builder, uriOffset) {
        builder.addFieldOffset(1, uriOffset, 0);
    };
    Buffer.addName = function (builder, nameOffset) {
        builder.addFieldOffset(2, nameOffset, 0);
    };
    Buffer.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(3, extensionsOffset, 0);
    };
    Buffer.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Buffer.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Buffer.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(4, extrasOffset, 0);
    };
    Buffer.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Buffer.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Buffer.endBuffer = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Buffer.createBuffer = function (builder, byteLength, uriOffset, nameOffset, extensionsOffset, extrasOffset) {
        Buffer.startBuffer(builder);
        Buffer.addByteLength(builder, byteLength);
        Buffer.addUri(builder, uriOffset);
        Buffer.addName(builder, nameOffset);
        Buffer.addExtensions(builder, extensionsOffset);
        Buffer.addExtras(builder, extrasOffset);
        return Buffer.endBuffer(builder);
    };
    return Buffer;
}());
exports.Buffer = Buffer;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessorSparse = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var accessor_sparse_indices_js_1 = require("../fla2/accessor-sparse-indices.js");
var accessor_sparse_values_js_1 = require("../fla2/accessor-sparse-values.js");
/**
 * Accessor Sparse
 */
var AccessorSparse = /** @class */ (function () {
    function AccessorSparse() {
        this.bb = null;
        this.bb_pos = 0;
    }
    AccessorSparse.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    AccessorSparse.getRootAsAccessorSparse = function (bb, obj) {
        return (obj || new AccessorSparse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    AccessorSparse.getSizePrefixedRootAsAccessorSparse = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new AccessorSparse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "Number of entries stored in the sparse array."
     * "gltf_detailedDescription": "The number of attributes encoded in this sparse accessor."
     * "minimum": 1
     */
    AccessorSparse.prototype.count = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "Index array of size `count` that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase."
     */
    AccessorSparse.prototype.indices = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? (obj || new accessor_sparse_indices_js_1.AccessorSparseIndices()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * "description": "Array of size `count` times number of components, storing the displaced accessor attributes pointed by `indices`. Substituted values must have the same `componentType` and number of components as the base accessor."
     */
    AccessorSparse.prototype.values = function (obj) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new accessor_sparse_values_js_1.AccessorSparseValues()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    AccessorSparse.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AccessorSparse.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AccessorSparse.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    AccessorSparse.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    AccessorSparse.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    AccessorSparse.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    AccessorSparse.startAccessorSparse = function (builder) {
        builder.startObject(5);
    };
    AccessorSparse.addCount = function (builder, count) {
        builder.addFieldInt32(0, count, 0);
    };
    AccessorSparse.addIndices = function (builder, indicesOffset) {
        builder.addFieldOffset(1, indicesOffset, 0);
    };
    AccessorSparse.addValues = function (builder, valuesOffset) {
        builder.addFieldOffset(2, valuesOffset, 0);
    };
    AccessorSparse.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(3, extensionsOffset, 0);
    };
    AccessorSparse.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AccessorSparse.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AccessorSparse.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(4, extrasOffset, 0);
    };
    AccessorSparse.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    AccessorSparse.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    AccessorSparse.endAccessorSparse = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 6); // indices
        builder.requiredField(offset, 8); // values
        return offset;
    };
    return AccessorSparse;
}());
exports.AccessorSparse = AccessorSparse;

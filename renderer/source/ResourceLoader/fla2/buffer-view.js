"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferView = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 * Buffer View
 * "description": "A view into a buffer generally representing a subset of the buffer."
 */
var BufferView = /** @class */ (function () {
    function BufferView() {
        this.bb = null;
        this.bb_pos = 0;
    }
    BufferView.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    BufferView.getRootAsBufferView = function (bb, obj) {
        return (obj || new BufferView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BufferView.getSizePrefixedRootAsBufferView = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new BufferView()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "The index of the buffer."
     */
    BufferView.prototype.buffer = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    BufferView.prototype.byteLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "The offset into the buffer in bytes."
     */
    BufferView.prototype.byteOffset = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "The stride, in bytes."
     * "minimum": 4
     * "maximum": 252
     * "multipleOf": 4
     * "gltf_detailedDescription": "The stride, in bytes, between vertex attributes.  When this is not defined, data is tightly packed. When two or more accessors use the same bufferView, this field must be defined."
     * "gltf_webgl": "`vertexAttribPointer()` stride parameter"
     */
    BufferView.prototype.byteStride = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    /**
     * "description": "The target that the GPU buffer should be bound to."
     * "gltf_webgl": "`bindBuffer()`"
     */
    BufferView.prototype.target = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    };
    BufferView.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    BufferView.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    BufferView.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    BufferView.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    BufferView.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    BufferView.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    BufferView.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    BufferView.startBufferView = function (builder) {
        builder.startObject(8);
    };
    BufferView.addBuffer = function (builder, buffer) {
        builder.addFieldInt32(0, buffer, 0);
    };
    BufferView.addByteLength = function (builder, byteLength) {
        builder.addFieldInt32(1, byteLength, 0);
    };
    BufferView.addByteOffset = function (builder, byteOffset) {
        builder.addFieldInt32(2, byteOffset, 0);
    };
    BufferView.addByteStride = function (builder, byteStride) {
        builder.addFieldInt32(3, byteStride, 0);
    };
    BufferView.addTarget = function (builder, target) {
        builder.addFieldInt32(4, target, 0);
    };
    BufferView.addName = function (builder, nameOffset) {
        builder.addFieldOffset(5, nameOffset, 0);
    };
    BufferView.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(6, extensionsOffset, 0);
    };
    BufferView.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    BufferView.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    BufferView.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(7, extrasOffset, 0);
    };
    BufferView.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    BufferView.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    BufferView.endBufferView = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    BufferView.createBufferView = function (builder, buffer, byteLength, byteOffset, byteStride, target, nameOffset, extensionsOffset, extrasOffset) {
        BufferView.startBufferView(builder);
        BufferView.addBuffer(builder, buffer);
        BufferView.addByteLength(builder, byteLength);
        BufferView.addByteOffset(builder, byteOffset);
        BufferView.addByteStride(builder, byteStride);
        BufferView.addTarget(builder, target);
        BufferView.addName(builder, nameOffset);
        BufferView.addExtensions(builder, extensionsOffset);
        BufferView.addExtras(builder, extrasOffset);
        return BufferView.endBufferView(builder);
    };
    return BufferView;
}());
exports.BufferView = BufferView;

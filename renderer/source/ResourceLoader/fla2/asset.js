"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 *----------------------------------------------------------------------------
 * Asset
 * Metadata about the glTF asset.
 */
var Asset = /** @class */ (function () {
    function Asset() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Asset.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Asset.getRootAsAsset = function (bb, obj) {
        return (obj || new Asset()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Asset.getSizePrefixedRootAsAsset = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Asset()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Asset.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Asset.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Asset.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Asset.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Asset.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Asset.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Asset.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Asset.prototype.generator = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Asset.prototype.minVersion = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Asset.prototype.version = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Asset.prototype.copyright = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Asset.startAsset = function (builder) {
        builder.startObject(7);
    };
    Asset.addName = function (builder, nameOffset) {
        builder.addFieldOffset(0, nameOffset, 0);
    };
    Asset.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(1, extensionsOffset, 0);
    };
    Asset.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Asset.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Asset.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(2, extrasOffset, 0);
    };
    Asset.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Asset.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Asset.addGenerator = function (builder, generatorOffset) {
        builder.addFieldOffset(3, generatorOffset, 0);
    };
    Asset.addMinVersion = function (builder, minVersionOffset) {
        builder.addFieldOffset(4, minVersionOffset, 0);
    };
    Asset.addVersion = function (builder, versionOffset) {
        builder.addFieldOffset(5, versionOffset, 0);
    };
    Asset.addCopyright = function (builder, copyrightOffset) {
        builder.addFieldOffset(6, copyrightOffset, 0);
    };
    Asset.endAsset = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 14); // version
        return offset;
    };
    Asset.createAsset = function (builder, nameOffset, extensionsOffset, extrasOffset, generatorOffset, minVersionOffset, versionOffset, copyrightOffset) {
        Asset.startAsset(builder);
        Asset.addName(builder, nameOffset);
        Asset.addExtensions(builder, extensionsOffset);
        Asset.addExtras(builder, extrasOffset);
        Asset.addGenerator(builder, generatorOffset);
        Asset.addMinVersion(builder, minVersionOffset);
        Asset.addVersion(builder, versionOffset);
        Asset.addCopyright(builder, copyrightOffset);
        return Asset.endAsset(builder);
    };
    return Asset;
}());
exports.Asset = Asset;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeshPrimitive = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var mesh_primitive_mode_js_1 = require("../fla2/mesh-primitive-mode.js");
/**
 * Mesh Primitive
 * "description": "Geometry to be rendered with the given material."
 * "gltf_webgl": "`drawElements()` and `drawArrays()`"
 */
var MeshPrimitive = /** @class */ (function () {
    function MeshPrimitive() {
        this.bb = null;
        this.bb_pos = 0;
    }
    MeshPrimitive.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    MeshPrimitive.getRootAsMeshPrimitive = function (bb, obj) {
        return (obj || new MeshPrimitive()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    MeshPrimitive.getSizePrefixedRootAsMeshPrimitive = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new MeshPrimitive()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data."
     *! NOTE: dictionary objects are not possible with flatbuffers (yet), hence this workaround
     */
    MeshPrimitive.prototype.attributes = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    MeshPrimitive.prototype.attributesLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    MeshPrimitive.prototype.attributesArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    MeshPrimitive.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    MeshPrimitive.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    MeshPrimitive.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target."
     * "description": "A dictionary object specifying attributes displacements in a Morph Target, where each key corresponds to one of the three supported attribute semantic (`POSITION`, `NORMAL`, or `TANGENT`) and each value is the index of the accessor containing the attribute displacements' data."
     */
    MeshPrimitive.prototype.targets = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    MeshPrimitive.prototype.targetsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    MeshPrimitive.prototype.targetsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "The index of the accessor that contains the indices."
     * "gltf_detailedDescription": "The index of the accessor that contains mesh indices.  When this is not defined, the primitives should be rendered without indices using `drawArrays()`.  When defined, the accessor must contain indices: the `bufferView` referenced by the accessor should have a `target` equal to 34963 (ELEMENT_ARRAY_BUFFER); `componentType` must be 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT) or 5125 (UNSIGNED_INT), the latter may require enabling additional hardware support; `type` must be `\"SCALAR\"`. For triangle primitives, the front face has a counter-clockwise (CCW) winding order."
     */
    MeshPrimitive.prototype.indices = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "The index of the material to apply to this primitive when rendering."
     */
    MeshPrimitive.prototype.material = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "The type of primitives to render."
     * "gltf_detailedDescription": "The type of primitives to render. All valid values correspond to WebGL enums."
     */
    MeshPrimitive.prototype.mode = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : mesh_primitive_mode_js_1.MeshPrimitiveMode.TRIANGLES;
    };
    /**
     * Application-specific data.
     */
    MeshPrimitive.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    MeshPrimitive.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    MeshPrimitive.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    MeshPrimitive.startMeshPrimitive = function (builder) {
        builder.startObject(7);
    };
    MeshPrimitive.addAttributes = function (builder, attributesOffset) {
        builder.addFieldOffset(0, attributesOffset, 0);
    };
    MeshPrimitive.createAttributesVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    MeshPrimitive.startAttributesVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    MeshPrimitive.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(1, extensionsOffset, 0);
    };
    MeshPrimitive.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    MeshPrimitive.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    MeshPrimitive.addTargets = function (builder, targetsOffset) {
        builder.addFieldOffset(2, targetsOffset, 0);
    };
    MeshPrimitive.createTargetsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    MeshPrimitive.startTargetsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    MeshPrimitive.addIndices = function (builder, indices) {
        builder.addFieldInt32(3, indices, -1);
    };
    MeshPrimitive.addMaterial = function (builder, material) {
        builder.addFieldInt32(4, material, -1);
    };
    MeshPrimitive.addMode = function (builder, mode) {
        builder.addFieldInt8(5, mode, mesh_primitive_mode_js_1.MeshPrimitiveMode.TRIANGLES);
    };
    MeshPrimitive.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(6, extrasOffset, 0);
    };
    MeshPrimitive.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    MeshPrimitive.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    MeshPrimitive.endMeshPrimitive = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 4); // attributes
        return offset;
    };
    MeshPrimitive.createMeshPrimitive = function (builder, attributesOffset, extensionsOffset, targetsOffset, indices, material, mode, extrasOffset) {
        MeshPrimitive.startMeshPrimitive(builder);
        MeshPrimitive.addAttributes(builder, attributesOffset);
        MeshPrimitive.addExtensions(builder, extensionsOffset);
        MeshPrimitive.addTargets(builder, targetsOffset);
        MeshPrimitive.addIndices(builder, indices);
        MeshPrimitive.addMaterial(builder, material);
        MeshPrimitive.addMode(builder, mode);
        MeshPrimitive.addExtras(builder, extrasOffset);
        return MeshPrimitive.endMeshPrimitive(builder);
    };
    return MeshPrimitive;
}());
exports.MeshPrimitive = MeshPrimitive;

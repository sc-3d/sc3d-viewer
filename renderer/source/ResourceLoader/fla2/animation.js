"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Animation = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var animation_channel_js_1 = require("../fla2/animation-channel.js");
var animation_sampler_js_1 = require("../fla2/animation-sampler.js");
/**
 * Animation
 * "description": "A keyframe animation."
 */
var Animation = /** @class */ (function () {
    function Animation() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Animation.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Animation.getRootAsAnimation = function (bb, obj) {
        return (obj || new Animation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Animation.getSizePrefixedRootAsAnimation = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Animation()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "An array of channels, each of which targets an animation's sampler at a node's property. Different channels of the same animation can't have equal targets."
     */
    Animation.prototype.channels = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new animation_channel_js_1.AnimationChannel()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Animation.prototype.channelsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Animation.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Animation.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Animation.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Animation.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Animation.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Animation.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Animation.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * "description": "An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)."
     */
    Animation.prototype.samplers = function (index, obj) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new animation_sampler_js_1.AnimationSampler()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Animation.prototype.samplersLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Animation.startAnimation = function (builder) {
        builder.startObject(5);
    };
    Animation.addChannels = function (builder, channelsOffset) {
        builder.addFieldOffset(0, channelsOffset, 0);
    };
    Animation.createChannelsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Animation.startChannelsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Animation.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(1, extensionsOffset, 0);
    };
    Animation.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Animation.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Animation.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(2, extrasOffset, 0);
    };
    Animation.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Animation.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Animation.addName = function (builder, nameOffset) {
        builder.addFieldOffset(3, nameOffset, 0);
    };
    Animation.addSamplers = function (builder, samplersOffset) {
        builder.addFieldOffset(4, samplersOffset, 0);
    };
    Animation.createSamplersVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    };
    Animation.startSamplersVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Animation.endAnimation = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 4); // channels
        builder.requiredField(offset, 12); // samplers
        return offset;
    };
    Animation.createAnimation = function (builder, channelsOffset, extensionsOffset, extrasOffset, nameOffset, samplersOffset) {
        Animation.startAnimation(builder);
        Animation.addChannels(builder, channelsOffset);
        Animation.addExtensions(builder, extensionsOffset);
        Animation.addExtras(builder, extrasOffset);
        Animation.addName(builder, nameOffset);
        Animation.addSamplers(builder, samplersOffset);
        return Animation.endAnimation(builder);
    };
    return Animation;
}());
exports.Animation = Animation;

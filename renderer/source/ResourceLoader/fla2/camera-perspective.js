"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraPerspective = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 * Camera Perspective
 * "description": "A perspective camera containing properties to create a perspective projection matrix."
 */
var CameraPerspective = /** @class */ (function () {
    function CameraPerspective() {
        this.bb = null;
        this.bb_pos = 0;
    }
    CameraPerspective.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    CameraPerspective.getRootAsCameraPerspective = function (bb, obj) {
        return (obj || new CameraPerspective()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    CameraPerspective.getSizePrefixedRootAsCameraPerspective = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CameraPerspective()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "The floating-point aspect ratio of the field of view."
     * "gltf_detailedDescription": "The floating-point aspect ratio of the field of view. When this is undefined, the aspect ratio of the canvas is used."
     */
    CameraPerspective.prototype.aspectRatio = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    CameraPerspective.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    CameraPerspective.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CameraPerspective.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    CameraPerspective.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    CameraPerspective.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    CameraPerspective.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "The floating-point vertical field of view in radians."
     */
    CameraPerspective.prototype.yfov = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    /**
     * "description": "The floating-point distance to the far clipping plane."
     * "gltf_detailedDescription": "The floating-point distance to the far clipping plane. When defined, `zfar` must be greater than `znear`. If `zfar` is undefined, runtime must use infinite projection matrix."
     */
    CameraPerspective.prototype.zfar = function () {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    /**
     * "description": "The floating-point distance to the near clipping plane."
     * "gltf_detailedDescription": "The floating-point distance to the near clipping plane."
     */
    CameraPerspective.prototype.znear = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    };
    CameraPerspective.startCameraPerspective = function (builder) {
        builder.startObject(6);
    };
    CameraPerspective.addAspectRatio = function (builder, aspectRatio) {
        builder.addFieldFloat32(0, aspectRatio, 0.0);
    };
    CameraPerspective.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(1, extensionsOffset, 0);
    };
    CameraPerspective.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    CameraPerspective.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    CameraPerspective.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(2, extrasOffset, 0);
    };
    CameraPerspective.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    CameraPerspective.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    CameraPerspective.addYfov = function (builder, yfov) {
        builder.addFieldFloat32(3, yfov, 0.0);
    };
    CameraPerspective.addZfar = function (builder, zfar) {
        builder.addFieldFloat32(4, zfar, 0.0);
    };
    CameraPerspective.addZnear = function (builder, znear) {
        builder.addFieldFloat32(5, znear, 0.0);
    };
    CameraPerspective.endCameraPerspective = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    CameraPerspective.createCameraPerspective = function (builder, aspectRatio, extensionsOffset, extrasOffset, yfov, zfar, znear) {
        CameraPerspective.startCameraPerspective(builder);
        CameraPerspective.addAspectRatio(builder, aspectRatio);
        CameraPerspective.addExtensions(builder, extensionsOffset);
        CameraPerspective.addExtras(builder, extrasOffset);
        CameraPerspective.addYfov(builder, yfov);
        CameraPerspective.addZfar(builder, zfar);
        CameraPerspective.addZnear(builder, znear);
        return CameraPerspective.endCameraPerspective(builder);
    };
    return CameraPerspective;
}());
exports.CameraPerspective = CameraPerspective;

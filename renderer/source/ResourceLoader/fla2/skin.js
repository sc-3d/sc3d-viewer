"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Skin = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 *----------------------------------------------------------------------------
 * Skin
 * "description": "Joints and matrices defining a skin."
 */
var Skin = /** @class */ (function () {
    function Skin() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Skin.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Skin.getRootAsSkin = function (bb, obj) {
        return (obj || new Skin()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Skin.getSizePrefixedRootAsSkin = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Skin()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Skin.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Skin.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Skin.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Skin.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Skin.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Skin.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * "description": "The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied."
     */
    Skin.prototype.inverseBindMatrices = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "Indices of skeleton nodes, used as joints in this skin."
     * "gltf_detailedDescription": "Indices of skeleton nodes, used as joints in this skin.  The array length must be the same as the `count` property of the `inverseBindMatrices` accessor (when defined)."
     */
    Skin.prototype.joints = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Skin.prototype.jointsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Skin.prototype.jointsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Skin.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * "description": "The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root."
     */
    Skin.prototype.skeleton = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    Skin.startSkin = function (builder) {
        builder.startObject(6);
    };
    Skin.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(0, extensionsOffset, 0);
    };
    Skin.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Skin.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Skin.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(1, extrasOffset, 0);
    };
    Skin.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Skin.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Skin.addInverseBindMatrices = function (builder, inverseBindMatrices) {
        builder.addFieldInt32(2, inverseBindMatrices, -1);
    };
    Skin.addJoints = function (builder, jointsOffset) {
        builder.addFieldOffset(3, jointsOffset, 0);
    };
    Skin.createJointsVector = function (builder, data) {
        builder.startVector(4, data.length, 4);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt32(data[i]);
        }
        return builder.endVector();
    };
    Skin.startJointsVector = function (builder, numElems) {
        builder.startVector(4, numElems, 4);
    };
    Skin.addName = function (builder, nameOffset) {
        builder.addFieldOffset(4, nameOffset, 0);
    };
    Skin.addSkeleton = function (builder, skeleton) {
        builder.addFieldInt32(5, skeleton, -1);
    };
    Skin.endSkin = function (builder) {
        var offset = builder.endObject();
        builder.requiredField(offset, 10); // joints
        return offset;
    };
    Skin.createSkin = function (builder, extensionsOffset, extrasOffset, inverseBindMatrices, jointsOffset, nameOffset, skeleton) {
        Skin.startSkin(builder);
        Skin.addExtensions(builder, extensionsOffset);
        Skin.addExtras(builder, extrasOffset);
        Skin.addInverseBindMatrices(builder, inverseBindMatrices);
        Skin.addJoints(builder, jointsOffset);
        Skin.addName(builder, nameOffset);
        Skin.addSkeleton(builder, skeleton);
        return Skin.endSkin(builder);
    };
    return Skin;
}());
exports.Skin = Skin;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sampler = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
var sampler_filter_js_1 = require("../fla2/sampler-filter.js");
var wrap_mode_js_1 = require("../fla2/wrap-mode.js");
/**
 * Sampler
 * "description": "Texture sampler properties for filtering and wrapping modes."
 * "gltf_webgl": "`texParameterf()`"
 */
var Sampler = /** @class */ (function () {
    function Sampler() {
        this.bb = null;
        this.bb_pos = 0;
    }
    Sampler.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    Sampler.getRootAsSampler = function (bb, obj) {
        return (obj || new Sampler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Sampler.getSizePrefixedRootAsSampler = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Sampler()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "s wrapping mode."
     * "gltf_detailedDescription": "s wrapping mode.  All valid values correspond to WebGL enums."
     * "gltf_webgl": "`texParameterf()` with pname equal to TEXTURE_WRAP_S"
     */
    Sampler.prototype.wrapS = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : wrap_mode_js_1.WrapMode.REPEAT;
    };
    /**
     * "description": "t wrapping mode."
     * "gltf_detailedDescription": "t wrapping mode.  All valid values correspond to WebGL enums."
     * "gltf_webgl": "`texParameterf()` with pname equal to TEXTURE_WRAP_T"
     */
    Sampler.prototype.wrapT = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : wrap_mode_js_1.WrapMode.REPEAT;
    };
    /**
     * "description": "Magnification filter."
     * "gltf_detailedDescription": "Magnification filter.  Valid values correspond to WebGL enums: `9728` (NEAREST) and `9729` (LINEAR)."
     * "gltf_webgl": "`texParameterf()` with pname equal to TEXTURE_MAG_FILTER"
     */
    Sampler.prototype.magFilter = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : sampler_filter_js_1.SamplerFilter.NEAREST;
    };
    /**
     * "description": "Minification filter."
     * "gltf_detailedDescription": "Minification filter.  All valid values correspond to WebGL enums."
     * "gltf_webgl": "`texParameterf()` with pname equal to TEXTURE_MIN_FILTER"
     */
    Sampler.prototype.minFilter = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : sampler_filter_js_1.SamplerFilter.NEAREST;
    };
    Sampler.prototype.name = function (optionalEncoding) {
        var offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    Sampler.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Sampler.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Sampler.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    Sampler.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    Sampler.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Sampler.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Sampler.startSampler = function (builder) {
        builder.startObject(7);
    };
    Sampler.addWrapS = function (builder, wrapS) {
        builder.addFieldInt32(0, wrapS, wrap_mode_js_1.WrapMode.REPEAT);
    };
    Sampler.addWrapT = function (builder, wrapT) {
        builder.addFieldInt32(1, wrapT, wrap_mode_js_1.WrapMode.REPEAT);
    };
    Sampler.addMagFilter = function (builder, magFilter) {
        builder.addFieldInt16(2, magFilter, sampler_filter_js_1.SamplerFilter.NEAREST);
    };
    Sampler.addMinFilter = function (builder, minFilter) {
        builder.addFieldInt16(3, minFilter, sampler_filter_js_1.SamplerFilter.NEAREST);
    };
    Sampler.addName = function (builder, nameOffset) {
        builder.addFieldOffset(4, nameOffset, 0);
    };
    Sampler.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(5, extensionsOffset, 0);
    };
    Sampler.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Sampler.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Sampler.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(6, extrasOffset, 0);
    };
    Sampler.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    Sampler.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    Sampler.endSampler = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    Sampler.createSampler = function (builder, wrapS, wrapT, magFilter, minFilter, nameOffset, extensionsOffset, extrasOffset) {
        Sampler.startSampler(builder);
        Sampler.addWrapS(builder, wrapS);
        Sampler.addWrapT(builder, wrapT);
        Sampler.addMagFilter(builder, magFilter);
        Sampler.addMinFilter(builder, minFilter);
        Sampler.addName(builder, nameOffset);
        Sampler.addExtensions(builder, extensionsOffset);
        Sampler.addExtras(builder, extrasOffset);
        return Sampler.endSampler(builder);
    };
    return Sampler;
}());
exports.Sampler = Sampler;

"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextureInfo = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
var flatbuffers = require("flatbuffers");
/**
 *----------------------------------------------------------------------------
 * Texture Info
 * "description": "Reference to a texture."
 */
var TextureInfo = /** @class */ (function () {
    function TextureInfo() {
        this.bb = null;
        this.bb_pos = 0;
    }
    TextureInfo.prototype.__init = function (i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    };
    TextureInfo.getRootAsTextureInfo = function (bb, obj) {
        return (obj || new TextureInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    TextureInfo.getSizePrefixedRootAsTextureInfo = function (bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new TextureInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    /**
     * "description": "The index of the texture."
     */
    TextureInfo.prototype.index = function () {
        var offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : -1;
    };
    /**
     * "description": "The set index of texture's TEXCOORD attribute used for texture coordinate mapping."
     * "gltf_detailedDescription": "This integer value is used to construct a string in the format TEXCOORD_<set index> which is a reference to a key in mesh.primitives.attributes (e.g. A value of 0 corresponds to TEXCOORD_0)."
     */
    TextureInfo.prototype.texCoord = function () {
        var offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    /**
     * Dictionary object with extension-specific objects.
     */
    TextureInfo.prototype.extensions = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    TextureInfo.prototype.extensionsLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    TextureInfo.prototype.extensionsArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    /**
     * Application-specific data.
     */
    TextureInfo.prototype.extras = function (index) {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
    };
    TextureInfo.prototype.extrasLength = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    TextureInfo.prototype.extrasArray = function () {
        var offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    TextureInfo.startTextureInfo = function (builder) {
        builder.startObject(4);
    };
    TextureInfo.addIndex = function (builder, index) {
        builder.addFieldInt32(0, index, -1);
    };
    TextureInfo.addTexCoord = function (builder, texCoord) {
        builder.addFieldInt32(1, texCoord, 0);
    };
    TextureInfo.addExtensions = function (builder, extensionsOffset) {
        builder.addFieldOffset(2, extensionsOffset, 0);
    };
    TextureInfo.createExtensionsVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    TextureInfo.startExtensionsVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    TextureInfo.addExtras = function (builder, extrasOffset) {
        builder.addFieldOffset(3, extrasOffset, 0);
    };
    TextureInfo.createExtrasVector = function (builder, data) {
        builder.startVector(1, data.length, 1);
        for (var i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]);
        }
        return builder.endVector();
    };
    TextureInfo.startExtrasVector = function (builder, numElems) {
        builder.startVector(1, numElems, 1);
    };
    TextureInfo.endTextureInfo = function (builder) {
        var offset = builder.endObject();
        return offset;
    };
    TextureInfo.createTextureInfo = function (builder, index, texCoord, extensionsOffset, extrasOffset) {
        TextureInfo.startTextureInfo(builder);
        TextureInfo.addIndex(builder, index);
        TextureInfo.addTexCoord(builder, texCoord);
        TextureInfo.addExtensions(builder, extensionsOffset);
        TextureInfo.addExtras(builder, extrasOffset);
        return TextureInfo.endTextureInfo(builder);
    };
    return TextureInfo;
}());
exports.TextureInfo = TextureInfo;
